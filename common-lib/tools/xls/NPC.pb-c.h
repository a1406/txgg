/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_NPC_2eproto__INCLUDED
#define PROTOBUF_C_NPC_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _NPC NPC;
typedef struct _NPCS NPCS;


/* --- enums --- */


/* --- messages --- */

struct  _NPC
{
  ProtobufCMessage base;
  int32_t id;
  char *name;
  int32_t scene_id;
  int32_t pos_x;
  int32_t pos_y;
  size_t n_func;
  int32_t *func;
};
#define NPC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&npc__descriptor) \
    , 0, NULL, 0, 0, 0, 0,NULL }


struct  _NPCS
{
  ProtobufCMessage base;
  size_t n_npc;
  NPC **npc;
};
#define NPCS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&npcs__descriptor) \
    , 0,NULL }


/* NPC methods */
void   npc__init
                     (NPC         *message);
size_t npc__get_packed_size
                     (const NPC   *message);
size_t npc__pack
                     (const NPC   *message,
                      uint8_t             *out);
size_t npc__pack_to_buffer
                     (const NPC   *message,
                      ProtobufCBuffer     *buffer);
NPC *
       npc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   npc__free_unpacked
                     (NPC *message,
                      ProtobufCAllocator *allocator);
/* NPCS methods */
void   npcs__init
                     (NPCS         *message);
size_t npcs__get_packed_size
                     (const NPCS   *message);
size_t npcs__pack
                     (const NPCS   *message,
                      uint8_t             *out);
size_t npcs__pack_to_buffer
                     (const NPCS   *message,
                      ProtobufCBuffer     *buffer);
NPCS *
       npcs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   npcs__free_unpacked
                     (NPCS *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*NPC_Closure)
                 (const NPC *message,
                  void *closure_data);
typedef void (*NPCS_Closure)
                 (const NPCS *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor npc__descriptor;
extern const ProtobufCMessageDescriptor npcs__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_NPC_2eproto__INCLUDED */
