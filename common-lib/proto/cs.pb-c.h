/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_cs_2eproto__INCLUDED
#define PROTOBUF_C_cs_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _EnterInstanceReq EnterInstanceReq;
typedef struct _EnterInstanceResp EnterInstanceResp;
typedef struct _LeaveInstanceResp LeaveInstanceResp;
typedef struct _InstanceBackwardNotify InstanceBackwardNotify;
typedef struct _RoleSummary RoleSummary;
typedef struct _LoginReq LoginReq;
typedef struct _LoginResp LoginResp;
typedef struct _ListroleReq ListroleReq;
typedef struct _ListroleResp ListroleResp;
typedef struct _CreateroleReq CreateroleReq;
typedef struct _CreateroleResp CreateroleResp;
typedef struct _MoveReq MoveReq;
typedef struct _MoveResp MoveResp;
typedef struct _MoveNotify MoveNotify;
typedef struct _TransportReq TransportReq;
typedef struct _TransportResp TransportResp;
typedef struct _RoleSightInfo RoleSightInfo;
typedef struct _RefreshSightNotify RefreshSightNotify;
typedef struct _LogoutNotify LogoutNotify;
typedef struct _KickNotify KickNotify;
typedef struct _ContainerThing ContainerThing;
typedef struct _ListContainerItemRequest ListContainerItemRequest;
typedef struct _ListContainerItemResponse ListContainerItemResponse;
typedef struct _DropContainerItemRequest DropContainerItemRequest;
typedef struct _DropContainerItemResponse DropContainerItemResponse;
typedef struct _SwapContainerItemRequest SwapContainerItemRequest;
typedef struct _SwapContainerItemResponse SwapContainerItemResponse;
typedef struct _OperateContainerItemRequest OperateContainerItemRequest;
typedef struct _ContainerChangedNotify ContainerChangedNotify;
typedef struct _RivalData RivalData;
typedef struct _RoundData RoundData;
typedef struct _FightNotify FightNotify;
typedef struct _InstanceRandDiceResponse InstanceRandDiceResponse;
typedef struct _InstanceMoveRequest InstanceMoveRequest;
typedef struct _InstanceMoveResponse InstanceMoveResponse;
typedef struct _InstanceStopResponse InstanceStopResponse;
typedef struct _GmRequest GmRequest;
typedef struct _GmResponse GmResponse;
typedef struct _GmNotify GmNotify;
typedef struct _ChatRequest ChatRequest;
typedef struct _ChatResponse ChatResponse;
typedef struct _ChatNotify ChatNotify;
typedef struct _QuestOperateRequest QuestOperateRequest;
typedef struct _QuestOperateResponse QuestOperateResponse;
typedef struct _QuestProgress QuestProgress;
typedef struct _QuestProgressListResponse QuestProgressListResponse;
typedef struct _QuestUpdateNotify QuestUpdateNotify;
typedef struct _SkillSetRequest SkillSetRequest;
typedef struct _SkillSetResponse SkillSetResponse;


/* --- enums --- */

typedef enum _CSMESSAGEID {
  CS__MESSAGE__ID__REFRESH_SIGHT_NOTIFY = 1,
  CS__MESSAGE__ID__LOGIN_REQUEST = 2,
  CS__MESSAGE__ID__LOGIN_RESPONSE = 3,
  CS__MESSAGE__ID__LOGOUT_REQUEST = 4,
  CS__MESSAGE__ID__LOGOUT_RESPONSE = 5,
  CS__MESSAGE__ID__CREATEROLE_REQUEST = 6,
  CS__MESSAGE__ID__CREATEROLE_RESPONSE = 7,
  CS__MESSAGE__ID__MOVE_REQUEST = 8,
  CS__MESSAGE__ID__MOVE_RESPONSE = 9,
  CS__MESSAGE__ID__MOVE_NOTIFY = 10,
  CS__MESSAGE__ID__TRANSPORT_REQUEST = 11,
  CS__MESSAGE__ID__TRANSPORT_RESPONSE = 12,
  CS__MESSAGE__ID__USE_CONTAINER_ITEM_REQUEST = 17,
  CS__MESSAGE__ID__USE_CONTAINER_ITEM_RESPONSE = 18,
  CS__MESSAGE__ID__SORT_CONTAINER_REQUEST = 19,
  CS__MESSAGE__ID__SORT_CONTAINER_RESPONSE = 20,
  CS__MESSAGE__ID__SWAP_CONTAINER_ITEM_REQUEST = 21,
  CS__MESSAGE__ID__SWAP_CONTAINER_ITEM_RESPONSE = 22,
  CS__MESSAGE__ID__LIST_CONTAINER_ITEM_REQUEST = 23,
  CS__MESSAGE__ID__LIST_CONTAINER_ITEM_RESPONSE = 24,
  CS__MESSAGE__ID__DROP_CONTAINER_ITEM_REQUEST = 25,
  CS__MESSAGE__ID__DROP_CONTAINER_ITEM_RESPONSE = 26,
  CS__MESSAGE__ID__CHAT_REQUEST = 27,
  CS__MESSAGE__ID__CHAT_RESPONSE = 28,
  CS__MESSAGE__ID__CHAT_NOTIFY = 29,
  CS__MESSAGE__ID__GM_REQUEST = 30,
  CS__MESSAGE__ID__GM_RESPONSE = 31,
  CS__MESSAGE__ID__GM_NOTIFY = 32,
  CS__MESSAGE__ID__QUEST_LIST_REQUEST = 35,
  CS__MESSAGE__ID__QUEST_LIST_RESPONSE = 36,
  CS__MESSAGE__ID__QUEST_UPDATE_NOTIFY = 37,
  CS__MESSAGE__ID__QUEST_OPERATE_REQUEST = 38,
  CS__MESSAGE__ID__QUEST_OPERATE_RESPONSE = 39,
  CS__MESSAGE__ID__SKILL_SET_REQUEST = 45,
  CS__MESSAGE__ID__SKILL_SET_RESPONSE = 46,
  CS__MESSAGE__ID__SKILL_LEARN_REQUEST = 47,
  CS__MESSAGE__ID__SKILL_LEARN_RESPONSE = 48,
  CS__MESSAGE__ID__SKILL_UPGRADE_REQUEST = 49,
  CS__MESSAGE__ID__SKILL_UPGRADE_RESPONSE = 50,
  CS__MESSAGE__ID__ENTER_INSTANCE_REQUEST = 100,
  CS__MESSAGE__ID__ENTER_INSTANCE_RESPONSE = 101,
  CS__MESSAGE__ID__LEAVE_INSTANCE_REQUEST = 102,
  CS__MESSAGE__ID__LEAVE_INSTANCE_RESPONSE = 103,
  CS__MESSAGE__ID__INSTANCE_RAND_DICE_REQUEST = 104,
  CS__MESSAGE__ID__INSTANCE_RAND_DICE_RESPONSE = 105,
  CS__MESSAGE__ID__INSTANCE_MOVE_REQUEST = 106,
  CS__MESSAGE__ID__INSTANCE_MOVE_RESPONSE = 107,
  CS__MESSAGE__ID__INSTANCE_FIGHT_NOTIFY = 108,
  CS__MESSAGE__ID__INSTANCE_STOP_REQUEST = 109,
  CS__MESSAGE__ID__INSTANCE_STOP_RESPONSE = 110,
  CS__MESSAGE__ID__INSTANCE_BACKWARD_NOTIFY = 111,
  CS__MESSAGE__ID__MAX_MSG_ID = 512
} CSMESSAGEID;
typedef enum _CONTAINERTYPE {
  CONTAINER__TYPE__BAG = 1,
  CONTAINER__TYPE__STORE = 2,
  CONTAINER__TYPE__EQUIP = 3
} CONTAINERTYPE;
typedef enum _ATTRID {
  ATTR__ID__HP = 1
} ATTRID;
typedef enum _CSFIGHTRESULT {
  CS__FIGHT__RESULT__LEFT_WIN = 0,
  CS__FIGHT__RESULT__RIGHT_WIN = 1
} CSFIGHTRESULT;
typedef enum _QUESTOPERATOR {
  QUEST__OPERATOR__ACCEPT = 1,
  QUEST__OPERATOR__CANCEL = 2,
  QUEST__OPERATOR__COMPLETE = 3
} QUESTOPERATOR;
typedef enum _QUESTSTATE {
  QUEST__STATE__IN_PROGRESS = 1,
  QUEST__STATE__FINISHED = 2
} QUESTSTATE;

/* --- messages --- */

struct  _EnterInstanceReq
{
  ProtobufCMessage base;
  uint32_t instance_id;
};
#define ENTER_INSTANCE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&enter_instance_req__descriptor) \
    , 0 }


struct  _EnterInstanceResp
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t instance_id;
};
#define ENTER_INSTANCE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&enter_instance_resp__descriptor) \
    , 0, 0 }


struct  _LeaveInstanceResp
{
  ProtobufCMessage base;
  uint32_t scene_id;
};
#define LEAVE_INSTANCE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&leave_instance_resp__descriptor) \
    , 0 }


struct  _InstanceBackwardNotify
{
  ProtobufCMessage base;
  uint32_t back_num;
};
#define INSTANCE_BACKWARD_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&instance_backward_notify__descriptor) \
    , 0 }


struct  _RoleSummary
{
  ProtobufCMessage base;
  uint32_t level;
  char *name;
  int32_t hp_max;
  int32_t hp_cur;
  uint32_t strength;
  uint32_t brain;
  uint32_t charm;
  uint32_t phy_attack;
  uint32_t magic_attack;
  uint32_t phy_defence;
  uint32_t magic_defence;
  uint32_t parry_rate;
  uint32_t counterattack_rate;
  uint32_t hit_rate;
  uint32_t jink_rate;
  uint32_t crit_rate;
  uint32_t speed;
  uint32_t exp;
  uint32_t active_skill1;
  uint32_t active_skill2;
  uint32_t active_skill3;
  size_t n_skill;
  uint32_t *skill;
};
#define ROLE_SUMMARY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&role_summary__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL }


struct  _LoginReq
{
  ProtobufCMessage base;
  uint32_t role_id;
  uint32_t area_id;
};
#define LOGIN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login_req__descriptor) \
    , 0, 0 }


struct  _LoginResp
{
  ProtobufCMessage base;
  uint32_t result;
  size_t n_role_summary;
  RoleSummary **role_summary;
  RoleSightInfo *info;
  uint32_t scene_id;
};
#define LOGIN_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login_resp__descriptor) \
    , 0, 0,NULL, NULL, 0 }


struct  _ListroleReq
{
  ProtobufCMessage base;
  uint32_t role_id;
  uint32_t area_id;
};
#define LISTROLE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&listrole_req__descriptor) \
    , 0, 0 }


struct  _ListroleResp
{
  ProtobufCMessage base;
  uint32_t role_id;
  uint32_t area_id;
  size_t n_role_summary;
  RoleSummary **role_summary;
};
#define LISTROLE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&listrole_resp__descriptor) \
    , 0, 0, 0,NULL }


struct  _CreateroleReq
{
  ProtobufCMessage base;
  uint32_t role_id;
  uint32_t area_id;
  uint32_t profession;
  char *name;
};
#define CREATEROLE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&createrole_req__descriptor) \
    , 0, 0, 0, NULL }


struct  _CreateroleResp
{
  ProtobufCMessage base;
  uint32_t result;
  RoleSummary *role_summary;
  RoleSightInfo *info;
  uint32_t scene_id;
};
#define CREATEROLE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&createrole_resp__descriptor) \
    , 0, NULL, NULL, 0 }


struct  _MoveReq
{
  ProtobufCMessage base;
  int32_t move_start_x;
  int32_t move_start_y;
  int32_t move_end_x;
  int32_t move_end_y;
};
#define MOVE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&move_req__descriptor) \
    , 0, 0, 0, 0 }


struct  _MoveResp
{
  ProtobufCMessage base;
  int32_t result;
  int32_t move_start_x;
  int32_t move_start_y;
  int32_t move_end_x;
  int32_t move_end_y;
};
#define MOVE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&move_resp__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _MoveNotify
{
  ProtobufCMessage base;
  uint32_t role_id;
  uint32_t area_id;
  int32_t move_start_x;
  int32_t move_start_y;
  int32_t move_end_x;
  int32_t move_end_y;
};
#define MOVE_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&move_notify__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _TransportReq
{
  ProtobufCMessage base;
  uint32_t target_scene_id;
};
#define TRANSPORT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transport_req__descriptor) \
    , 0 }


struct  _TransportResp
{
  ProtobufCMessage base;
  int32_t result;
  uint32_t scene_id;
  int32_t pos_x;
  int32_t pos_y;
};
#define TRANSPORT_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transport_resp__descriptor) \
    , 0, 0, 0, 0 }


struct  _RoleSightInfo
{
  ProtobufCMessage base;
  uint32_t role_id;
  uint32_t area_id;
  char *name;
  uint32_t level;
  uint32_t profession;
  int32_t move_start_x;
  int32_t move_start_y;
  int32_t move_end_x;
  int32_t move_end_y;
  uint32_t move_speed;
};
#define ROLE_SIGHT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&role_sight_info__descriptor) \
    , 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0 }


struct  _RefreshSightNotify
{
  ProtobufCMessage base;
  size_t n_add_role;
  RoleSightInfo **add_role;
  size_t n_leave_role_id;
  uint32_t *leave_role_id;
  size_t n_leave_role_area;
  uint32_t *leave_role_area;
};
#define REFRESH_SIGHT_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&refresh_sight_notify__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL }


struct  _LogoutNotify
{
  ProtobufCMessage base;
  uint32_t role_id;
  uint32_t area_id;
};
#define LOGOUT_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&logout_notify__descriptor) \
    , 0, 0 }


struct  _KickNotify
{
  ProtobufCMessage base;
  uint32_t reason;
};
#define KICK_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kick_notify__descriptor) \
    , 0 }


struct  _ContainerThing
{
  ProtobufCMessage base;
  uint32_t thing_pos;
  uint32_t thing_id;
  uint32_t thing_num;
};
#define CONTAINER_THING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&container_thing__descriptor) \
    , 0, 0, 0 }


struct  _ListContainerItemRequest
{
  ProtobufCMessage base;
  uint32_t container_type;
};
#define LIST_CONTAINER_ITEM_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&list_container_item_request__descriptor) \
    , 0 }


struct  _ListContainerItemResponse
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t container_type;
  size_t n_things;
  ContainerThing **things;
  uint32_t max_thing_num;
};
#define LIST_CONTAINER_ITEM_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&list_container_item_response__descriptor) \
    , 0, 0, 0,NULL, 0 }


struct  _DropContainerItemRequest
{
  ProtobufCMessage base;
  uint32_t container_type;
  uint32_t thing_pos;
  uint32_t thing_num;
};
#define DROP_CONTAINER_ITEM_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drop_container_item_request__descriptor) \
    , 0, 0, 0 }


struct  _DropContainerItemResponse
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t container_type;
  uint32_t thing_pos;
  uint32_t thing_num;
};
#define DROP_CONTAINER_ITEM_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drop_container_item_response__descriptor) \
    , 0, 0, 0, 0 }


struct  _SwapContainerItemRequest
{
  ProtobufCMessage base;
  uint32_t container_type;
  uint32_t thing_pos1;
  uint32_t thing_pos2;
};
#define SWAP_CONTAINER_ITEM_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&swap_container_item_request__descriptor) \
    , 0, 0, 0 }


struct  _SwapContainerItemResponse
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t container_type;
  uint32_t thing_pos1;
  uint32_t thing_pos2;
};
#define SWAP_CONTAINER_ITEM_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&swap_container_item_response__descriptor) \
    , 0, 0, 0, 0 }


struct  _OperateContainerItemRequest
{
  ProtobufCMessage base;
  uint32_t container_type;
  uint32_t thing_pos;
  uint32_t thing_id;
  uint32_t thing_num;
};
#define OPERATE_CONTAINER_ITEM_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&operate_container_item_request__descriptor) \
    , 0, 0, 0, 0 }


struct  _ContainerChangedNotify
{
  ProtobufCMessage base;
  uint32_t container_type;
  size_t n_add_thing;
  ContainerThing **add_thing;
  size_t n_del_thing;
  ContainerThing **del_thing;
};
#define CONTAINER_CHANGED_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&container_changed_notify__descriptor) \
    , 0, 0,NULL, 0,NULL }


struct  _RivalData
{
  ProtobufCMessage base;
  char *name;
  uint32_t res_id;
  uint32_t hp;
  size_t n_buff;
  uint32_t *buff;
};
#define RIVAL_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rival_data__descriptor) \
    , NULL, 0, 0, 0,NULL }


struct  _RoundData
{
  ProtobufCMessage base;
  protobuf_c_boolean left;
  uint32_t skill_id;
  protobuf_c_boolean is_jink;
  protobuf_c_boolean is_parry;
  protobuf_c_boolean is_crit;
  size_t n_lattr_id;
  uint32_t *lattr_id;
  size_t n_lattr_value;
  int32_t *lattr_value;
  size_t n_rattr_id;
  uint32_t *rattr_id;
  size_t n_rattr_value;
  int32_t *rattr_value;
  size_t n_lbuff_add;
  uint32_t *lbuff_add;
  size_t n_lbuff_del;
  uint32_t *lbuff_del;
  size_t n_lbuff_effect_attr_id;
  uint32_t *lbuff_effect_attr_id;
  size_t n_lbuff_effect_attr_value;
  int32_t *lbuff_effect_attr_value;
  size_t n_rbuff_effect_attr_id;
  uint32_t *rbuff_effect_attr_id;
  size_t n_rbuff_effect_attr_value;
  int32_t *rbuff_effect_attr_value;
  size_t n_rbuff_add;
  uint32_t *rbuff_add;
  size_t n_rbuff_del;
  uint32_t *rbuff_del;
  protobuf_c_boolean is_counterattack;
  uint32_t counterattack_hp_delta;
};
#define ROUND_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&round_data__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0 }


struct  _FightNotify
{
  ProtobufCMessage base;
  RivalData *rival_data_left;
  RivalData *rival_data_right;
  int32_t result;
  size_t n_round_data;
  RoundData **round_data;
};
#define FIGHT_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fight_notify__descriptor) \
    , NULL, NULL, 0, 0,NULL }


struct  _InstanceRandDiceResponse
{
  ProtobufCMessage base;
  uint32_t num;
};
#define INSTANCE_RAND_DICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&instance_rand_dice_response__descriptor) \
    , 0 }


struct  _InstanceMoveRequest
{
  ProtobufCMessage base;
  size_t n_id;
  uint32_t *id;
};
#define INSTANCE_MOVE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&instance_move_request__descriptor) \
    , 0,NULL }


struct  _InstanceMoveResponse
{
  ProtobufCMessage base;
  uint32_t result;
  size_t n_id;
  uint32_t *id;
};
#define INSTANCE_MOVE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&instance_move_response__descriptor) \
    , 0, 0,NULL }


struct  _InstanceStopResponse
{
  ProtobufCMessage base;
  uint32_t result;
};
#define INSTANCE_STOP_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&instance_stop_response__descriptor) \
    , 0 }


struct  _GmRequest
{
  ProtobufCMessage base;
  char *command;
};
#define GM_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gm_request__descriptor) \
    , NULL }


struct  _GmResponse
{
  ProtobufCMessage base;
  uint32_t result;
};
#define GM_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gm_response__descriptor) \
    , 0 }


struct  _GmNotify
{
  ProtobufCMessage base;
  uint32_t type;
  char *msg;
};
#define GM_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gm_notify__descriptor) \
    , 0, NULL }


struct  _ChatRequest
{
  ProtobufCMessage base;
  uint32_t channel;
  uint32_t target_role_id;
  uint32_t target_area_id;
  char *msg;
  char *pic_index;
  char *pic_name;
};
#define CHAT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_request__descriptor) \
    , 0, 0, 0, NULL, NULL, NULL }


struct  _ChatResponse
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t channel;
  uint32_t target_role_id;
  uint32_t target_area_id;
  char *target_name;
  char *msg;
  char *pic_index;
  char *pic_name;
};
#define CHAT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_response__descriptor) \
    , 0, 0, 0, 0, NULL, NULL, NULL, NULL }


struct  _ChatNotify
{
  ProtobufCMessage base;
  uint32_t channel;
  uint32_t src_role_id;
  uint32_t src_area_id;
  char *src_name;
  uint32_t dst_role_id;
  uint32_t dst_area_id;
  char *dst_name;
  char *msg;
  char *pic_index;
  char *pic_name;
};
#define CHAT_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_notify__descriptor) \
    , 0, 0, 0, NULL, 0, 0, NULL, NULL, NULL, NULL }


struct  _QuestOperateRequest
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t operator_;
};
#define QUEST_OPERATE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quest_operate_request__descriptor) \
    , 0, 0 }


struct  _QuestOperateResponse
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t id;
  uint32_t operator_;
};
#define QUEST_OPERATE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quest_operate_response__descriptor) \
    , 0, 0, 0 }


struct  _QuestProgress
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t state;
  uint32_t accept_time;
  uint32_t cycle_num;
  uint32_t kill_npc1_num;
  uint32_t kill_npc2_num;
  uint32_t kill_npc3_num;
  uint32_t collect_item1_num;
  uint32_t collect_item2_num;
  uint32_t collect_item3_num;
};
#define QUEST_PROGRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quest_progress__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _QuestProgressListResponse
{
  ProtobufCMessage base;
  size_t n_quest;
  QuestProgress **quest;
  uint32_t main_quest_index;
  size_t n_all_finished_slave_quest;
  uint32_t *all_finished_slave_quest;
};
#define QUEST_PROGRESS_LIST_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quest_progress_list_response__descriptor) \
    , 0,NULL, 0, 0,NULL }


struct  _QuestUpdateNotify
{
  ProtobufCMessage base;
  QuestProgress *progress;
};
#define QUEST_UPDATE_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quest_update_notify__descriptor) \
    , NULL }


struct  _SkillSetRequest
{
  ProtobufCMessage base;
  uint32_t role_pos;
  uint32_t id;
  uint32_t pos;
};
#define SKILL_SET_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&skill_set_request__descriptor) \
    , 0, 0, 0 }


struct  _SkillSetResponse
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t id;
  uint32_t pos;
};
#define SKILL_SET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&skill_set_response__descriptor) \
    , 0, 0, 0 }


/* EnterInstanceReq methods */
void   enter_instance_req__init
                     (EnterInstanceReq         *message);
size_t enter_instance_req__get_packed_size
                     (const EnterInstanceReq   *message);
size_t enter_instance_req__pack
                     (const EnterInstanceReq   *message,
                      uint8_t             *out);
size_t enter_instance_req__pack_to_buffer
                     (const EnterInstanceReq   *message,
                      ProtobufCBuffer     *buffer);
EnterInstanceReq *
       enter_instance_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   enter_instance_req__free_unpacked
                     (EnterInstanceReq *message,
                      ProtobufCAllocator *allocator);
/* EnterInstanceResp methods */
void   enter_instance_resp__init
                     (EnterInstanceResp         *message);
size_t enter_instance_resp__get_packed_size
                     (const EnterInstanceResp   *message);
size_t enter_instance_resp__pack
                     (const EnterInstanceResp   *message,
                      uint8_t             *out);
size_t enter_instance_resp__pack_to_buffer
                     (const EnterInstanceResp   *message,
                      ProtobufCBuffer     *buffer);
EnterInstanceResp *
       enter_instance_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   enter_instance_resp__free_unpacked
                     (EnterInstanceResp *message,
                      ProtobufCAllocator *allocator);
/* LeaveInstanceResp methods */
void   leave_instance_resp__init
                     (LeaveInstanceResp         *message);
size_t leave_instance_resp__get_packed_size
                     (const LeaveInstanceResp   *message);
size_t leave_instance_resp__pack
                     (const LeaveInstanceResp   *message,
                      uint8_t             *out);
size_t leave_instance_resp__pack_to_buffer
                     (const LeaveInstanceResp   *message,
                      ProtobufCBuffer     *buffer);
LeaveInstanceResp *
       leave_instance_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   leave_instance_resp__free_unpacked
                     (LeaveInstanceResp *message,
                      ProtobufCAllocator *allocator);
/* InstanceBackwardNotify methods */
void   instance_backward_notify__init
                     (InstanceBackwardNotify         *message);
size_t instance_backward_notify__get_packed_size
                     (const InstanceBackwardNotify   *message);
size_t instance_backward_notify__pack
                     (const InstanceBackwardNotify   *message,
                      uint8_t             *out);
size_t instance_backward_notify__pack_to_buffer
                     (const InstanceBackwardNotify   *message,
                      ProtobufCBuffer     *buffer);
InstanceBackwardNotify *
       instance_backward_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   instance_backward_notify__free_unpacked
                     (InstanceBackwardNotify *message,
                      ProtobufCAllocator *allocator);
/* RoleSummary methods */
void   role_summary__init
                     (RoleSummary         *message);
size_t role_summary__get_packed_size
                     (const RoleSummary   *message);
size_t role_summary__pack
                     (const RoleSummary   *message,
                      uint8_t             *out);
size_t role_summary__pack_to_buffer
                     (const RoleSummary   *message,
                      ProtobufCBuffer     *buffer);
RoleSummary *
       role_summary__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   role_summary__free_unpacked
                     (RoleSummary *message,
                      ProtobufCAllocator *allocator);
/* LoginReq methods */
void   login_req__init
                     (LoginReq         *message);
size_t login_req__get_packed_size
                     (const LoginReq   *message);
size_t login_req__pack
                     (const LoginReq   *message,
                      uint8_t             *out);
size_t login_req__pack_to_buffer
                     (const LoginReq   *message,
                      ProtobufCBuffer     *buffer);
LoginReq *
       login_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login_req__free_unpacked
                     (LoginReq *message,
                      ProtobufCAllocator *allocator);
/* LoginResp methods */
void   login_resp__init
                     (LoginResp         *message);
size_t login_resp__get_packed_size
                     (const LoginResp   *message);
size_t login_resp__pack
                     (const LoginResp   *message,
                      uint8_t             *out);
size_t login_resp__pack_to_buffer
                     (const LoginResp   *message,
                      ProtobufCBuffer     *buffer);
LoginResp *
       login_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login_resp__free_unpacked
                     (LoginResp *message,
                      ProtobufCAllocator *allocator);
/* ListroleReq methods */
void   listrole_req__init
                     (ListroleReq         *message);
size_t listrole_req__get_packed_size
                     (const ListroleReq   *message);
size_t listrole_req__pack
                     (const ListroleReq   *message,
                      uint8_t             *out);
size_t listrole_req__pack_to_buffer
                     (const ListroleReq   *message,
                      ProtobufCBuffer     *buffer);
ListroleReq *
       listrole_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   listrole_req__free_unpacked
                     (ListroleReq *message,
                      ProtobufCAllocator *allocator);
/* ListroleResp methods */
void   listrole_resp__init
                     (ListroleResp         *message);
size_t listrole_resp__get_packed_size
                     (const ListroleResp   *message);
size_t listrole_resp__pack
                     (const ListroleResp   *message,
                      uint8_t             *out);
size_t listrole_resp__pack_to_buffer
                     (const ListroleResp   *message,
                      ProtobufCBuffer     *buffer);
ListroleResp *
       listrole_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   listrole_resp__free_unpacked
                     (ListroleResp *message,
                      ProtobufCAllocator *allocator);
/* CreateroleReq methods */
void   createrole_req__init
                     (CreateroleReq         *message);
size_t createrole_req__get_packed_size
                     (const CreateroleReq   *message);
size_t createrole_req__pack
                     (const CreateroleReq   *message,
                      uint8_t             *out);
size_t createrole_req__pack_to_buffer
                     (const CreateroleReq   *message,
                      ProtobufCBuffer     *buffer);
CreateroleReq *
       createrole_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   createrole_req__free_unpacked
                     (CreateroleReq *message,
                      ProtobufCAllocator *allocator);
/* CreateroleResp methods */
void   createrole_resp__init
                     (CreateroleResp         *message);
size_t createrole_resp__get_packed_size
                     (const CreateroleResp   *message);
size_t createrole_resp__pack
                     (const CreateroleResp   *message,
                      uint8_t             *out);
size_t createrole_resp__pack_to_buffer
                     (const CreateroleResp   *message,
                      ProtobufCBuffer     *buffer);
CreateroleResp *
       createrole_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   createrole_resp__free_unpacked
                     (CreateroleResp *message,
                      ProtobufCAllocator *allocator);
/* MoveReq methods */
void   move_req__init
                     (MoveReq         *message);
size_t move_req__get_packed_size
                     (const MoveReq   *message);
size_t move_req__pack
                     (const MoveReq   *message,
                      uint8_t             *out);
size_t move_req__pack_to_buffer
                     (const MoveReq   *message,
                      ProtobufCBuffer     *buffer);
MoveReq *
       move_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   move_req__free_unpacked
                     (MoveReq *message,
                      ProtobufCAllocator *allocator);
/* MoveResp methods */
void   move_resp__init
                     (MoveResp         *message);
size_t move_resp__get_packed_size
                     (const MoveResp   *message);
size_t move_resp__pack
                     (const MoveResp   *message,
                      uint8_t             *out);
size_t move_resp__pack_to_buffer
                     (const MoveResp   *message,
                      ProtobufCBuffer     *buffer);
MoveResp *
       move_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   move_resp__free_unpacked
                     (MoveResp *message,
                      ProtobufCAllocator *allocator);
/* MoveNotify methods */
void   move_notify__init
                     (MoveNotify         *message);
size_t move_notify__get_packed_size
                     (const MoveNotify   *message);
size_t move_notify__pack
                     (const MoveNotify   *message,
                      uint8_t             *out);
size_t move_notify__pack_to_buffer
                     (const MoveNotify   *message,
                      ProtobufCBuffer     *buffer);
MoveNotify *
       move_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   move_notify__free_unpacked
                     (MoveNotify *message,
                      ProtobufCAllocator *allocator);
/* TransportReq methods */
void   transport_req__init
                     (TransportReq         *message);
size_t transport_req__get_packed_size
                     (const TransportReq   *message);
size_t transport_req__pack
                     (const TransportReq   *message,
                      uint8_t             *out);
size_t transport_req__pack_to_buffer
                     (const TransportReq   *message,
                      ProtobufCBuffer     *buffer);
TransportReq *
       transport_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   transport_req__free_unpacked
                     (TransportReq *message,
                      ProtobufCAllocator *allocator);
/* TransportResp methods */
void   transport_resp__init
                     (TransportResp         *message);
size_t transport_resp__get_packed_size
                     (const TransportResp   *message);
size_t transport_resp__pack
                     (const TransportResp   *message,
                      uint8_t             *out);
size_t transport_resp__pack_to_buffer
                     (const TransportResp   *message,
                      ProtobufCBuffer     *buffer);
TransportResp *
       transport_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   transport_resp__free_unpacked
                     (TransportResp *message,
                      ProtobufCAllocator *allocator);
/* RoleSightInfo methods */
void   role_sight_info__init
                     (RoleSightInfo         *message);
size_t role_sight_info__get_packed_size
                     (const RoleSightInfo   *message);
size_t role_sight_info__pack
                     (const RoleSightInfo   *message,
                      uint8_t             *out);
size_t role_sight_info__pack_to_buffer
                     (const RoleSightInfo   *message,
                      ProtobufCBuffer     *buffer);
RoleSightInfo *
       role_sight_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   role_sight_info__free_unpacked
                     (RoleSightInfo *message,
                      ProtobufCAllocator *allocator);
/* RefreshSightNotify methods */
void   refresh_sight_notify__init
                     (RefreshSightNotify         *message);
size_t refresh_sight_notify__get_packed_size
                     (const RefreshSightNotify   *message);
size_t refresh_sight_notify__pack
                     (const RefreshSightNotify   *message,
                      uint8_t             *out);
size_t refresh_sight_notify__pack_to_buffer
                     (const RefreshSightNotify   *message,
                      ProtobufCBuffer     *buffer);
RefreshSightNotify *
       refresh_sight_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   refresh_sight_notify__free_unpacked
                     (RefreshSightNotify *message,
                      ProtobufCAllocator *allocator);
/* LogoutNotify methods */
void   logout_notify__init
                     (LogoutNotify         *message);
size_t logout_notify__get_packed_size
                     (const LogoutNotify   *message);
size_t logout_notify__pack
                     (const LogoutNotify   *message,
                      uint8_t             *out);
size_t logout_notify__pack_to_buffer
                     (const LogoutNotify   *message,
                      ProtobufCBuffer     *buffer);
LogoutNotify *
       logout_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   logout_notify__free_unpacked
                     (LogoutNotify *message,
                      ProtobufCAllocator *allocator);
/* KickNotify methods */
void   kick_notify__init
                     (KickNotify         *message);
size_t kick_notify__get_packed_size
                     (const KickNotify   *message);
size_t kick_notify__pack
                     (const KickNotify   *message,
                      uint8_t             *out);
size_t kick_notify__pack_to_buffer
                     (const KickNotify   *message,
                      ProtobufCBuffer     *buffer);
KickNotify *
       kick_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kick_notify__free_unpacked
                     (KickNotify *message,
                      ProtobufCAllocator *allocator);
/* ContainerThing methods */
void   container_thing__init
                     (ContainerThing         *message);
size_t container_thing__get_packed_size
                     (const ContainerThing   *message);
size_t container_thing__pack
                     (const ContainerThing   *message,
                      uint8_t             *out);
size_t container_thing__pack_to_buffer
                     (const ContainerThing   *message,
                      ProtobufCBuffer     *buffer);
ContainerThing *
       container_thing__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   container_thing__free_unpacked
                     (ContainerThing *message,
                      ProtobufCAllocator *allocator);
/* ListContainerItemRequest methods */
void   list_container_item_request__init
                     (ListContainerItemRequest         *message);
size_t list_container_item_request__get_packed_size
                     (const ListContainerItemRequest   *message);
size_t list_container_item_request__pack
                     (const ListContainerItemRequest   *message,
                      uint8_t             *out);
size_t list_container_item_request__pack_to_buffer
                     (const ListContainerItemRequest   *message,
                      ProtobufCBuffer     *buffer);
ListContainerItemRequest *
       list_container_item_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   list_container_item_request__free_unpacked
                     (ListContainerItemRequest *message,
                      ProtobufCAllocator *allocator);
/* ListContainerItemResponse methods */
void   list_container_item_response__init
                     (ListContainerItemResponse         *message);
size_t list_container_item_response__get_packed_size
                     (const ListContainerItemResponse   *message);
size_t list_container_item_response__pack
                     (const ListContainerItemResponse   *message,
                      uint8_t             *out);
size_t list_container_item_response__pack_to_buffer
                     (const ListContainerItemResponse   *message,
                      ProtobufCBuffer     *buffer);
ListContainerItemResponse *
       list_container_item_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   list_container_item_response__free_unpacked
                     (ListContainerItemResponse *message,
                      ProtobufCAllocator *allocator);
/* DropContainerItemRequest methods */
void   drop_container_item_request__init
                     (DropContainerItemRequest         *message);
size_t drop_container_item_request__get_packed_size
                     (const DropContainerItemRequest   *message);
size_t drop_container_item_request__pack
                     (const DropContainerItemRequest   *message,
                      uint8_t             *out);
size_t drop_container_item_request__pack_to_buffer
                     (const DropContainerItemRequest   *message,
                      ProtobufCBuffer     *buffer);
DropContainerItemRequest *
       drop_container_item_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   drop_container_item_request__free_unpacked
                     (DropContainerItemRequest *message,
                      ProtobufCAllocator *allocator);
/* DropContainerItemResponse methods */
void   drop_container_item_response__init
                     (DropContainerItemResponse         *message);
size_t drop_container_item_response__get_packed_size
                     (const DropContainerItemResponse   *message);
size_t drop_container_item_response__pack
                     (const DropContainerItemResponse   *message,
                      uint8_t             *out);
size_t drop_container_item_response__pack_to_buffer
                     (const DropContainerItemResponse   *message,
                      ProtobufCBuffer     *buffer);
DropContainerItemResponse *
       drop_container_item_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   drop_container_item_response__free_unpacked
                     (DropContainerItemResponse *message,
                      ProtobufCAllocator *allocator);
/* SwapContainerItemRequest methods */
void   swap_container_item_request__init
                     (SwapContainerItemRequest         *message);
size_t swap_container_item_request__get_packed_size
                     (const SwapContainerItemRequest   *message);
size_t swap_container_item_request__pack
                     (const SwapContainerItemRequest   *message,
                      uint8_t             *out);
size_t swap_container_item_request__pack_to_buffer
                     (const SwapContainerItemRequest   *message,
                      ProtobufCBuffer     *buffer);
SwapContainerItemRequest *
       swap_container_item_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   swap_container_item_request__free_unpacked
                     (SwapContainerItemRequest *message,
                      ProtobufCAllocator *allocator);
/* SwapContainerItemResponse methods */
void   swap_container_item_response__init
                     (SwapContainerItemResponse         *message);
size_t swap_container_item_response__get_packed_size
                     (const SwapContainerItemResponse   *message);
size_t swap_container_item_response__pack
                     (const SwapContainerItemResponse   *message,
                      uint8_t             *out);
size_t swap_container_item_response__pack_to_buffer
                     (const SwapContainerItemResponse   *message,
                      ProtobufCBuffer     *buffer);
SwapContainerItemResponse *
       swap_container_item_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   swap_container_item_response__free_unpacked
                     (SwapContainerItemResponse *message,
                      ProtobufCAllocator *allocator);
/* OperateContainerItemRequest methods */
void   operate_container_item_request__init
                     (OperateContainerItemRequest         *message);
size_t operate_container_item_request__get_packed_size
                     (const OperateContainerItemRequest   *message);
size_t operate_container_item_request__pack
                     (const OperateContainerItemRequest   *message,
                      uint8_t             *out);
size_t operate_container_item_request__pack_to_buffer
                     (const OperateContainerItemRequest   *message,
                      ProtobufCBuffer     *buffer);
OperateContainerItemRequest *
       operate_container_item_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   operate_container_item_request__free_unpacked
                     (OperateContainerItemRequest *message,
                      ProtobufCAllocator *allocator);
/* ContainerChangedNotify methods */
void   container_changed_notify__init
                     (ContainerChangedNotify         *message);
size_t container_changed_notify__get_packed_size
                     (const ContainerChangedNotify   *message);
size_t container_changed_notify__pack
                     (const ContainerChangedNotify   *message,
                      uint8_t             *out);
size_t container_changed_notify__pack_to_buffer
                     (const ContainerChangedNotify   *message,
                      ProtobufCBuffer     *buffer);
ContainerChangedNotify *
       container_changed_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   container_changed_notify__free_unpacked
                     (ContainerChangedNotify *message,
                      ProtobufCAllocator *allocator);
/* RivalData methods */
void   rival_data__init
                     (RivalData         *message);
size_t rival_data__get_packed_size
                     (const RivalData   *message);
size_t rival_data__pack
                     (const RivalData   *message,
                      uint8_t             *out);
size_t rival_data__pack_to_buffer
                     (const RivalData   *message,
                      ProtobufCBuffer     *buffer);
RivalData *
       rival_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rival_data__free_unpacked
                     (RivalData *message,
                      ProtobufCAllocator *allocator);
/* RoundData methods */
void   round_data__init
                     (RoundData         *message);
size_t round_data__get_packed_size
                     (const RoundData   *message);
size_t round_data__pack
                     (const RoundData   *message,
                      uint8_t             *out);
size_t round_data__pack_to_buffer
                     (const RoundData   *message,
                      ProtobufCBuffer     *buffer);
RoundData *
       round_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   round_data__free_unpacked
                     (RoundData *message,
                      ProtobufCAllocator *allocator);
/* FightNotify methods */
void   fight_notify__init
                     (FightNotify         *message);
size_t fight_notify__get_packed_size
                     (const FightNotify   *message);
size_t fight_notify__pack
                     (const FightNotify   *message,
                      uint8_t             *out);
size_t fight_notify__pack_to_buffer
                     (const FightNotify   *message,
                      ProtobufCBuffer     *buffer);
FightNotify *
       fight_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fight_notify__free_unpacked
                     (FightNotify *message,
                      ProtobufCAllocator *allocator);
/* InstanceRandDiceResponse methods */
void   instance_rand_dice_response__init
                     (InstanceRandDiceResponse         *message);
size_t instance_rand_dice_response__get_packed_size
                     (const InstanceRandDiceResponse   *message);
size_t instance_rand_dice_response__pack
                     (const InstanceRandDiceResponse   *message,
                      uint8_t             *out);
size_t instance_rand_dice_response__pack_to_buffer
                     (const InstanceRandDiceResponse   *message,
                      ProtobufCBuffer     *buffer);
InstanceRandDiceResponse *
       instance_rand_dice_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   instance_rand_dice_response__free_unpacked
                     (InstanceRandDiceResponse *message,
                      ProtobufCAllocator *allocator);
/* InstanceMoveRequest methods */
void   instance_move_request__init
                     (InstanceMoveRequest         *message);
size_t instance_move_request__get_packed_size
                     (const InstanceMoveRequest   *message);
size_t instance_move_request__pack
                     (const InstanceMoveRequest   *message,
                      uint8_t             *out);
size_t instance_move_request__pack_to_buffer
                     (const InstanceMoveRequest   *message,
                      ProtobufCBuffer     *buffer);
InstanceMoveRequest *
       instance_move_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   instance_move_request__free_unpacked
                     (InstanceMoveRequest *message,
                      ProtobufCAllocator *allocator);
/* InstanceMoveResponse methods */
void   instance_move_response__init
                     (InstanceMoveResponse         *message);
size_t instance_move_response__get_packed_size
                     (const InstanceMoveResponse   *message);
size_t instance_move_response__pack
                     (const InstanceMoveResponse   *message,
                      uint8_t             *out);
size_t instance_move_response__pack_to_buffer
                     (const InstanceMoveResponse   *message,
                      ProtobufCBuffer     *buffer);
InstanceMoveResponse *
       instance_move_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   instance_move_response__free_unpacked
                     (InstanceMoveResponse *message,
                      ProtobufCAllocator *allocator);
/* InstanceStopResponse methods */
void   instance_stop_response__init
                     (InstanceStopResponse         *message);
size_t instance_stop_response__get_packed_size
                     (const InstanceStopResponse   *message);
size_t instance_stop_response__pack
                     (const InstanceStopResponse   *message,
                      uint8_t             *out);
size_t instance_stop_response__pack_to_buffer
                     (const InstanceStopResponse   *message,
                      ProtobufCBuffer     *buffer);
InstanceStopResponse *
       instance_stop_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   instance_stop_response__free_unpacked
                     (InstanceStopResponse *message,
                      ProtobufCAllocator *allocator);
/* GmRequest methods */
void   gm_request__init
                     (GmRequest         *message);
size_t gm_request__get_packed_size
                     (const GmRequest   *message);
size_t gm_request__pack
                     (const GmRequest   *message,
                      uint8_t             *out);
size_t gm_request__pack_to_buffer
                     (const GmRequest   *message,
                      ProtobufCBuffer     *buffer);
GmRequest *
       gm_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gm_request__free_unpacked
                     (GmRequest *message,
                      ProtobufCAllocator *allocator);
/* GmResponse methods */
void   gm_response__init
                     (GmResponse         *message);
size_t gm_response__get_packed_size
                     (const GmResponse   *message);
size_t gm_response__pack
                     (const GmResponse   *message,
                      uint8_t             *out);
size_t gm_response__pack_to_buffer
                     (const GmResponse   *message,
                      ProtobufCBuffer     *buffer);
GmResponse *
       gm_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gm_response__free_unpacked
                     (GmResponse *message,
                      ProtobufCAllocator *allocator);
/* GmNotify methods */
void   gm_notify__init
                     (GmNotify         *message);
size_t gm_notify__get_packed_size
                     (const GmNotify   *message);
size_t gm_notify__pack
                     (const GmNotify   *message,
                      uint8_t             *out);
size_t gm_notify__pack_to_buffer
                     (const GmNotify   *message,
                      ProtobufCBuffer     *buffer);
GmNotify *
       gm_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gm_notify__free_unpacked
                     (GmNotify *message,
                      ProtobufCAllocator *allocator);
/* ChatRequest methods */
void   chat_request__init
                     (ChatRequest         *message);
size_t chat_request__get_packed_size
                     (const ChatRequest   *message);
size_t chat_request__pack
                     (const ChatRequest   *message,
                      uint8_t             *out);
size_t chat_request__pack_to_buffer
                     (const ChatRequest   *message,
                      ProtobufCBuffer     *buffer);
ChatRequest *
       chat_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_request__free_unpacked
                     (ChatRequest *message,
                      ProtobufCAllocator *allocator);
/* ChatResponse methods */
void   chat_response__init
                     (ChatResponse         *message);
size_t chat_response__get_packed_size
                     (const ChatResponse   *message);
size_t chat_response__pack
                     (const ChatResponse   *message,
                      uint8_t             *out);
size_t chat_response__pack_to_buffer
                     (const ChatResponse   *message,
                      ProtobufCBuffer     *buffer);
ChatResponse *
       chat_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_response__free_unpacked
                     (ChatResponse *message,
                      ProtobufCAllocator *allocator);
/* ChatNotify methods */
void   chat_notify__init
                     (ChatNotify         *message);
size_t chat_notify__get_packed_size
                     (const ChatNotify   *message);
size_t chat_notify__pack
                     (const ChatNotify   *message,
                      uint8_t             *out);
size_t chat_notify__pack_to_buffer
                     (const ChatNotify   *message,
                      ProtobufCBuffer     *buffer);
ChatNotify *
       chat_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_notify__free_unpacked
                     (ChatNotify *message,
                      ProtobufCAllocator *allocator);
/* QuestOperateRequest methods */
void   quest_operate_request__init
                     (QuestOperateRequest         *message);
size_t quest_operate_request__get_packed_size
                     (const QuestOperateRequest   *message);
size_t quest_operate_request__pack
                     (const QuestOperateRequest   *message,
                      uint8_t             *out);
size_t quest_operate_request__pack_to_buffer
                     (const QuestOperateRequest   *message,
                      ProtobufCBuffer     *buffer);
QuestOperateRequest *
       quest_operate_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quest_operate_request__free_unpacked
                     (QuestOperateRequest *message,
                      ProtobufCAllocator *allocator);
/* QuestOperateResponse methods */
void   quest_operate_response__init
                     (QuestOperateResponse         *message);
size_t quest_operate_response__get_packed_size
                     (const QuestOperateResponse   *message);
size_t quest_operate_response__pack
                     (const QuestOperateResponse   *message,
                      uint8_t             *out);
size_t quest_operate_response__pack_to_buffer
                     (const QuestOperateResponse   *message,
                      ProtobufCBuffer     *buffer);
QuestOperateResponse *
       quest_operate_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quest_operate_response__free_unpacked
                     (QuestOperateResponse *message,
                      ProtobufCAllocator *allocator);
/* QuestProgress methods */
void   quest_progress__init
                     (QuestProgress         *message);
size_t quest_progress__get_packed_size
                     (const QuestProgress   *message);
size_t quest_progress__pack
                     (const QuestProgress   *message,
                      uint8_t             *out);
size_t quest_progress__pack_to_buffer
                     (const QuestProgress   *message,
                      ProtobufCBuffer     *buffer);
QuestProgress *
       quest_progress__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quest_progress__free_unpacked
                     (QuestProgress *message,
                      ProtobufCAllocator *allocator);
/* QuestProgressListResponse methods */
void   quest_progress_list_response__init
                     (QuestProgressListResponse         *message);
size_t quest_progress_list_response__get_packed_size
                     (const QuestProgressListResponse   *message);
size_t quest_progress_list_response__pack
                     (const QuestProgressListResponse   *message,
                      uint8_t             *out);
size_t quest_progress_list_response__pack_to_buffer
                     (const QuestProgressListResponse   *message,
                      ProtobufCBuffer     *buffer);
QuestProgressListResponse *
       quest_progress_list_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quest_progress_list_response__free_unpacked
                     (QuestProgressListResponse *message,
                      ProtobufCAllocator *allocator);
/* QuestUpdateNotify methods */
void   quest_update_notify__init
                     (QuestUpdateNotify         *message);
size_t quest_update_notify__get_packed_size
                     (const QuestUpdateNotify   *message);
size_t quest_update_notify__pack
                     (const QuestUpdateNotify   *message,
                      uint8_t             *out);
size_t quest_update_notify__pack_to_buffer
                     (const QuestUpdateNotify   *message,
                      ProtobufCBuffer     *buffer);
QuestUpdateNotify *
       quest_update_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quest_update_notify__free_unpacked
                     (QuestUpdateNotify *message,
                      ProtobufCAllocator *allocator);
/* SkillSetRequest methods */
void   skill_set_request__init
                     (SkillSetRequest         *message);
size_t skill_set_request__get_packed_size
                     (const SkillSetRequest   *message);
size_t skill_set_request__pack
                     (const SkillSetRequest   *message,
                      uint8_t             *out);
size_t skill_set_request__pack_to_buffer
                     (const SkillSetRequest   *message,
                      ProtobufCBuffer     *buffer);
SkillSetRequest *
       skill_set_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   skill_set_request__free_unpacked
                     (SkillSetRequest *message,
                      ProtobufCAllocator *allocator);
/* SkillSetResponse methods */
void   skill_set_response__init
                     (SkillSetResponse         *message);
size_t skill_set_response__get_packed_size
                     (const SkillSetResponse   *message);
size_t skill_set_response__pack
                     (const SkillSetResponse   *message,
                      uint8_t             *out);
size_t skill_set_response__pack_to_buffer
                     (const SkillSetResponse   *message,
                      ProtobufCBuffer     *buffer);
SkillSetResponse *
       skill_set_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   skill_set_response__free_unpacked
                     (SkillSetResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*EnterInstanceReq_Closure)
                 (const EnterInstanceReq *message,
                  void *closure_data);
typedef void (*EnterInstanceResp_Closure)
                 (const EnterInstanceResp *message,
                  void *closure_data);
typedef void (*LeaveInstanceResp_Closure)
                 (const LeaveInstanceResp *message,
                  void *closure_data);
typedef void (*InstanceBackwardNotify_Closure)
                 (const InstanceBackwardNotify *message,
                  void *closure_data);
typedef void (*RoleSummary_Closure)
                 (const RoleSummary *message,
                  void *closure_data);
typedef void (*LoginReq_Closure)
                 (const LoginReq *message,
                  void *closure_data);
typedef void (*LoginResp_Closure)
                 (const LoginResp *message,
                  void *closure_data);
typedef void (*ListroleReq_Closure)
                 (const ListroleReq *message,
                  void *closure_data);
typedef void (*ListroleResp_Closure)
                 (const ListroleResp *message,
                  void *closure_data);
typedef void (*CreateroleReq_Closure)
                 (const CreateroleReq *message,
                  void *closure_data);
typedef void (*CreateroleResp_Closure)
                 (const CreateroleResp *message,
                  void *closure_data);
typedef void (*MoveReq_Closure)
                 (const MoveReq *message,
                  void *closure_data);
typedef void (*MoveResp_Closure)
                 (const MoveResp *message,
                  void *closure_data);
typedef void (*MoveNotify_Closure)
                 (const MoveNotify *message,
                  void *closure_data);
typedef void (*TransportReq_Closure)
                 (const TransportReq *message,
                  void *closure_data);
typedef void (*TransportResp_Closure)
                 (const TransportResp *message,
                  void *closure_data);
typedef void (*RoleSightInfo_Closure)
                 (const RoleSightInfo *message,
                  void *closure_data);
typedef void (*RefreshSightNotify_Closure)
                 (const RefreshSightNotify *message,
                  void *closure_data);
typedef void (*LogoutNotify_Closure)
                 (const LogoutNotify *message,
                  void *closure_data);
typedef void (*KickNotify_Closure)
                 (const KickNotify *message,
                  void *closure_data);
typedef void (*ContainerThing_Closure)
                 (const ContainerThing *message,
                  void *closure_data);
typedef void (*ListContainerItemRequest_Closure)
                 (const ListContainerItemRequest *message,
                  void *closure_data);
typedef void (*ListContainerItemResponse_Closure)
                 (const ListContainerItemResponse *message,
                  void *closure_data);
typedef void (*DropContainerItemRequest_Closure)
                 (const DropContainerItemRequest *message,
                  void *closure_data);
typedef void (*DropContainerItemResponse_Closure)
                 (const DropContainerItemResponse *message,
                  void *closure_data);
typedef void (*SwapContainerItemRequest_Closure)
                 (const SwapContainerItemRequest *message,
                  void *closure_data);
typedef void (*SwapContainerItemResponse_Closure)
                 (const SwapContainerItemResponse *message,
                  void *closure_data);
typedef void (*OperateContainerItemRequest_Closure)
                 (const OperateContainerItemRequest *message,
                  void *closure_data);
typedef void (*ContainerChangedNotify_Closure)
                 (const ContainerChangedNotify *message,
                  void *closure_data);
typedef void (*RivalData_Closure)
                 (const RivalData *message,
                  void *closure_data);
typedef void (*RoundData_Closure)
                 (const RoundData *message,
                  void *closure_data);
typedef void (*FightNotify_Closure)
                 (const FightNotify *message,
                  void *closure_data);
typedef void (*InstanceRandDiceResponse_Closure)
                 (const InstanceRandDiceResponse *message,
                  void *closure_data);
typedef void (*InstanceMoveRequest_Closure)
                 (const InstanceMoveRequest *message,
                  void *closure_data);
typedef void (*InstanceMoveResponse_Closure)
                 (const InstanceMoveResponse *message,
                  void *closure_data);
typedef void (*InstanceStopResponse_Closure)
                 (const InstanceStopResponse *message,
                  void *closure_data);
typedef void (*GmRequest_Closure)
                 (const GmRequest *message,
                  void *closure_data);
typedef void (*GmResponse_Closure)
                 (const GmResponse *message,
                  void *closure_data);
typedef void (*GmNotify_Closure)
                 (const GmNotify *message,
                  void *closure_data);
typedef void (*ChatRequest_Closure)
                 (const ChatRequest *message,
                  void *closure_data);
typedef void (*ChatResponse_Closure)
                 (const ChatResponse *message,
                  void *closure_data);
typedef void (*ChatNotify_Closure)
                 (const ChatNotify *message,
                  void *closure_data);
typedef void (*QuestOperateRequest_Closure)
                 (const QuestOperateRequest *message,
                  void *closure_data);
typedef void (*QuestOperateResponse_Closure)
                 (const QuestOperateResponse *message,
                  void *closure_data);
typedef void (*QuestProgress_Closure)
                 (const QuestProgress *message,
                  void *closure_data);
typedef void (*QuestProgressListResponse_Closure)
                 (const QuestProgressListResponse *message,
                  void *closure_data);
typedef void (*QuestUpdateNotify_Closure)
                 (const QuestUpdateNotify *message,
                  void *closure_data);
typedef void (*SkillSetRequest_Closure)
                 (const SkillSetRequest *message,
                  void *closure_data);
typedef void (*SkillSetResponse_Closure)
                 (const SkillSetResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    cs__message__id__descriptor;
extern const ProtobufCEnumDescriptor    container__type__descriptor;
extern const ProtobufCEnumDescriptor    attr__id__descriptor;
extern const ProtobufCEnumDescriptor    cs__fight__result__descriptor;
extern const ProtobufCEnumDescriptor    quest__operator__descriptor;
extern const ProtobufCEnumDescriptor    quest__state__descriptor;
extern const ProtobufCMessageDescriptor enter_instance_req__descriptor;
extern const ProtobufCMessageDescriptor enter_instance_resp__descriptor;
extern const ProtobufCMessageDescriptor leave_instance_resp__descriptor;
extern const ProtobufCMessageDescriptor instance_backward_notify__descriptor;
extern const ProtobufCMessageDescriptor role_summary__descriptor;
extern const ProtobufCMessageDescriptor login_req__descriptor;
extern const ProtobufCMessageDescriptor login_resp__descriptor;
extern const ProtobufCMessageDescriptor listrole_req__descriptor;
extern const ProtobufCMessageDescriptor listrole_resp__descriptor;
extern const ProtobufCMessageDescriptor createrole_req__descriptor;
extern const ProtobufCMessageDescriptor createrole_resp__descriptor;
extern const ProtobufCMessageDescriptor move_req__descriptor;
extern const ProtobufCMessageDescriptor move_resp__descriptor;
extern const ProtobufCMessageDescriptor move_notify__descriptor;
extern const ProtobufCMessageDescriptor transport_req__descriptor;
extern const ProtobufCMessageDescriptor transport_resp__descriptor;
extern const ProtobufCMessageDescriptor role_sight_info__descriptor;
extern const ProtobufCMessageDescriptor refresh_sight_notify__descriptor;
extern const ProtobufCMessageDescriptor logout_notify__descriptor;
extern const ProtobufCMessageDescriptor kick_notify__descriptor;
extern const ProtobufCMessageDescriptor container_thing__descriptor;
extern const ProtobufCMessageDescriptor list_container_item_request__descriptor;
extern const ProtobufCMessageDescriptor list_container_item_response__descriptor;
extern const ProtobufCMessageDescriptor drop_container_item_request__descriptor;
extern const ProtobufCMessageDescriptor drop_container_item_response__descriptor;
extern const ProtobufCMessageDescriptor swap_container_item_request__descriptor;
extern const ProtobufCMessageDescriptor swap_container_item_response__descriptor;
extern const ProtobufCMessageDescriptor operate_container_item_request__descriptor;
extern const ProtobufCMessageDescriptor container_changed_notify__descriptor;
extern const ProtobufCMessageDescriptor rival_data__descriptor;
extern const ProtobufCMessageDescriptor round_data__descriptor;
extern const ProtobufCMessageDescriptor fight_notify__descriptor;
extern const ProtobufCMessageDescriptor instance_rand_dice_response__descriptor;
extern const ProtobufCMessageDescriptor instance_move_request__descriptor;
extern const ProtobufCMessageDescriptor instance_move_response__descriptor;
extern const ProtobufCMessageDescriptor instance_stop_response__descriptor;
extern const ProtobufCMessageDescriptor gm_request__descriptor;
extern const ProtobufCMessageDescriptor gm_response__descriptor;
extern const ProtobufCMessageDescriptor gm_notify__descriptor;
extern const ProtobufCMessageDescriptor chat_request__descriptor;
extern const ProtobufCMessageDescriptor chat_response__descriptor;
extern const ProtobufCMessageDescriptor chat_notify__descriptor;
extern const ProtobufCMessageDescriptor quest_operate_request__descriptor;
extern const ProtobufCMessageDescriptor quest_operate_response__descriptor;
extern const ProtobufCMessageDescriptor quest_progress__descriptor;
extern const ProtobufCMessageDescriptor quest_progress_list_response__descriptor;
extern const ProtobufCMessageDescriptor quest_update_notify__descriptor;
extern const ProtobufCMessageDescriptor skill_set_request__descriptor;
extern const ProtobufCMessageDescriptor skill_set_response__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_cs_2eproto__INCLUDED */
