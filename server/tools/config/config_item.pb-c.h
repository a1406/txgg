/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_config_5fitem_2eproto__INCLUDED
#define PROTOBUF_C_config_5fitem_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _CFGITEM CFGITEM;
typedef struct _CFGITEMS CFGITEMS;


/* --- enums --- */


/* --- messages --- */

struct  _CFGITEM
{
  ProtobufCMessage base;
  int32_t id;
  char *name;
  int32_t level;
  int32_t type;
  int32_t trade_able;
  int32_t sell_able;
  int32_t drop_able;
  int32_t icon;
  char *desc;
  int32_t level_limit;
  int32_t prof_limit;
  int32_t sex_limit;
  int32_t buy_price;
  int32_t sell_price;
  int32_t energy_price;
  int32_t stack_able;
  int32_t script_able;
  int32_t attr_id;
  int32_t strong_id;
  int32_t merge_id;
};
#define CFG__ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cfg__item__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _CFGITEMS
{
  ProtobufCMessage base;
  size_t n_item;
  CFGITEM **item;
};
#define CFG__ITEMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cfg__items__descriptor) \
    , 0,NULL }


/* CFGITEM methods */
void   cfg__item__init
                     (CFGITEM         *message);
size_t cfg__item__get_packed_size
                     (const CFGITEM   *message);
size_t cfg__item__pack
                     (const CFGITEM   *message,
                      uint8_t             *out);
size_t cfg__item__pack_to_buffer
                     (const CFGITEM   *message,
                      ProtobufCBuffer     *buffer);
CFGITEM *
       cfg__item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfg__item__free_unpacked
                     (CFGITEM *message,
                      ProtobufCAllocator *allocator);
/* CFGITEMS methods */
void   cfg__items__init
                     (CFGITEMS         *message);
size_t cfg__items__get_packed_size
                     (const CFGITEMS   *message);
size_t cfg__items__pack
                     (const CFGITEMS   *message,
                      uint8_t             *out);
size_t cfg__items__pack_to_buffer
                     (const CFGITEMS   *message,
                      ProtobufCBuffer     *buffer);
CFGITEMS *
       cfg__items__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfg__items__free_unpacked
                     (CFGITEMS *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CFGITEM_Closure)
                 (const CFGITEM *message,
                  void *closure_data);
typedef void (*CFGITEMS_Closure)
                 (const CFGITEMS *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cfg__item__descriptor;
extern const ProtobufCMessageDescriptor cfg__items__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_config_5fitem_2eproto__INCLUDED */
