/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_config_5fquest_5fbranch_2eproto__INCLUDED
#define PROTOBUF_C_config_5fquest_5fbranch_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _CFGBRANCHQUEST CFGBRANCHQUEST;
typedef struct _CFGBRANCHQUESTS CFGBRANCHQUESTS;


/* --- enums --- */


/* --- messages --- */

struct  _CFGBRANCHQUEST
{
  ProtobufCMessage base;
  int32_t id;
  char *name;
  int32_t pre_id;
  int32_t type;
  int32_t npc;
  int32_t level;
  int32_t friendly;
  int32_t time;
  int32_t camp;
  int32_t prof;
  int32_t sex;
  int32_t item;
  int32_t item_num;
  char *msg;
  char *button;
  char *desc;
  int32_t map;
  int32_t finish_npc;
  int32_t finish_level;
  int32_t finish_friend;
  int32_t finish_time;
  int32_t kill_npc1;
  int32_t kill_npc1_num;
  int32_t kill_npc2;
  int32_t kill_npc2_num;
  int32_t kill_npc3;
  int32_t kill_npc3_num;
  int32_t collect_item1;
  int32_t collect_item1_num;
  int32_t collect_item2;
  int32_t collect_item2_num;
  int32_t collect_item3;
  int32_t collect_item3_num;
  int32_t award_item;
  int32_t award_item_num;
  int32_t award_exp;
  int32_t award_money;
  int32_t award_friendly;
  int32_t script;
  char *unfinish_msg;
  char *unfinish_button;
  char *finish_msg;
  char *finish_button;
};
#define CFG__BRANCH__QUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cfg__branch__quest__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, NULL, NULL, NULL }


struct  _CFGBRANCHQUESTS
{
  ProtobufCMessage base;
  size_t n_quest;
  CFGBRANCHQUEST **quest;
};
#define CFG__BRANCH__QUESTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cfg__branch__quests__descriptor) \
    , 0,NULL }


/* CFGBRANCHQUEST methods */
void   cfg__branch__quest__init
                     (CFGBRANCHQUEST         *message);
size_t cfg__branch__quest__get_packed_size
                     (const CFGBRANCHQUEST   *message);
size_t cfg__branch__quest__pack
                     (const CFGBRANCHQUEST   *message,
                      uint8_t             *out);
size_t cfg__branch__quest__pack_to_buffer
                     (const CFGBRANCHQUEST   *message,
                      ProtobufCBuffer     *buffer);
CFGBRANCHQUEST *
       cfg__branch__quest__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfg__branch__quest__free_unpacked
                     (CFGBRANCHQUEST *message,
                      ProtobufCAllocator *allocator);
/* CFGBRANCHQUESTS methods */
void   cfg__branch__quests__init
                     (CFGBRANCHQUESTS         *message);
size_t cfg__branch__quests__get_packed_size
                     (const CFGBRANCHQUESTS   *message);
size_t cfg__branch__quests__pack
                     (const CFGBRANCHQUESTS   *message,
                      uint8_t             *out);
size_t cfg__branch__quests__pack_to_buffer
                     (const CFGBRANCHQUESTS   *message,
                      ProtobufCBuffer     *buffer);
CFGBRANCHQUESTS *
       cfg__branch__quests__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfg__branch__quests__free_unpacked
                     (CFGBRANCHQUESTS *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CFGBRANCHQUEST_Closure)
                 (const CFGBRANCHQUEST *message,
                  void *closure_data);
typedef void (*CFGBRANCHQUESTS_Closure)
                 (const CFGBRANCHQUESTS *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cfg__branch__quest__descriptor;
extern const ProtobufCMessageDescriptor cfg__branch__quests__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_config_5fquest_5fbranch_2eproto__INCLUDED */
